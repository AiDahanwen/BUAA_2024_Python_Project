Index: backend/.idea/workspace.xml
===================================================================
diff --git a/backend/.idea/workspace.xml b/backend/.idea/workspace.xml
deleted file mode 100644
--- a/backend/.idea/workspace.xml	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
+++ /dev/null	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
@@ -1,50 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ChangeListManager">
-    <list default="true" id="ac835a3e-de54-41ea-b3b5-b928e1e01629" name="Changes" comment="">
-      <change beforePath="$PROJECT_DIR$/../.idea/BUAA_2024_Python_Project.iml" beforeDir="false" afterPath="$PROJECT_DIR$/../.idea/BUAA_2024_Python_Project.iml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../.idea/misc.xml" afterDir="false" />
-    </list>
-    <option name="SHOW_DIALOG" value="false" />
-    <option name="HIGHLIGHT_CONFLICTS" value="true" />
-    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
-    <option name="LAST_RESOLUTION" value="IGNORE" />
-  </component>
-  <component name="Git.Settings">
-    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$/.." />
-  </component>
-  <component name="ProjectColorInfo"><![CDATA[{
-  "customColor": "",
-  "associatedIndex": 2
-}]]></component>
-  <component name="ProjectId" id="2jlStlSgJ12sI3s0PAwNztlrxLU" />
-  <component name="ProjectViewState">
-    <option name="hideEmptyMiddlePackages" value="true" />
-    <option name="showLibraryContents" value="true" />
-  </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "git-widget-placeholder": "main"
-  }
-}]]></component>
-  <component name="SharedIndexes">
-    <attachedChunks>
-      <set>
-        <option value="bundled-python-sdk-09665e90c3a7-d3b881c8e49f-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-233.15026.15" />
-      </set>
-    </attachedChunks>
-  </component>
-  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
-  <component name="TaskManager">
-    <task active="true" id="Default" summary="Default task">
-      <changelist id="ac835a3e-de54-41ea-b3b5-b928e1e01629" name="Changes" comment="" />
-      <created>1721960386768</created>
-      <option name="number" value="Default" />
-      <option name="presentableId" value="Default" />
-      <updated>1721960386768</updated>
-    </task>
-    <servers />
-  </component>
-</project>
\ No newline at end of file
Index: .gitignore
===================================================================
diff --git a/.gitignore b/.gitignore
deleted file mode 100644
--- a/.gitignore	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
+++ /dev/null	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
@@ -1,51 +0,0 @@
-##ignore this file##
-/target/
-/.idea/
-/.settings/
-/.vscode/
-/bin/
-
-.classpath
-.project
-.settings
-.idea
- ##filter databfile„ÄÅsln file##
-*.mdb
-*.ldb
-*.sln
-##class file##
-*.com
-*.class
-*.dll
-*.exe
-*.o
-*.so
-# compression file
-*.7z
-*.dmg
-*.gz
-*.iso
-*.jar
-*.rar
-*.tar
-*.zip
-*.via
-*.tmp
-*.err
-*.log
-*.iml
-# OS generated files #
-.DS_Store
-.DS_Store?
-._*
-.Spotlight-V100
-.Trashes
-Icon?
-ehthumbs.db
-Thumbs.db
-.factorypath
-/.mvn/
-/mvnw.cmd
-/mvnw
-*.pyc
-.gitignore
\ No newline at end of file
Index: backend/.idea/vcs.xml
===================================================================
diff --git a/backend/.idea/vcs.xml b/backend/.idea/vcs.xml
deleted file mode 100644
--- a/backend/.idea/vcs.xml	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
+++ /dev/null	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="VcsDirectoryMappings">
-    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
-  </component>
-</project>
\ No newline at end of file
Index: backend/.idea/inspectionProfiles/profiles_settings.xml
===================================================================
diff --git a/backend/.idea/inspectionProfiles/profiles_settings.xml b/backend/.idea/inspectionProfiles/profiles_settings.xml
deleted file mode 100644
--- a/backend/.idea/inspectionProfiles/profiles_settings.xml	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
+++ /dev/null	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
@@ -1,6 +0,0 @@
-<component name="InspectionProjectProfileManager">
-  <settings>
-    <option name="USE_PROJECT_PROFILE" value="false" />
-    <version value="1.0" />
-  </settings>
-</component>
\ No newline at end of file
Index: .idea/modules.xml
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
deleted file mode 100644
--- a/.idea/modules.xml	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
+++ /dev/null	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectModuleManager">
-    <modules>
-      <module fileurl="file://$PROJECT_DIR$/.idea/BUAA_2024_Python_Project.iml" filepath="$PROJECT_DIR$/.idea/BUAA_2024_Python_Project.iml" />
-    </modules>
-  </component>
-</project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
deleted file mode 100644
--- a/.idea/vcs.xml	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
+++ /dev/null	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="VcsDirectoryMappings">
-    <mapping directory="" vcs="Git" />
-  </component>
-</project>
\ No newline at end of file
Index: frontend/.idea/workspace.xml
===================================================================
diff --git a/frontend/.idea/workspace.xml b/frontend/.idea/workspace.xml
deleted file mode 100644
--- a/frontend/.idea/workspace.xml	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
+++ /dev/null	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
@@ -1,44 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="AutoImportSettings">
-    <option name="autoReloadType" value="SELECTIVE" />
-  </component>
-  <component name="ChangeListManager">
-    <list default="true" id="8509a7ce-6fc6-4dda-9ae1-7f2c6babfed9" name="Changes" comment="" />
-    <option name="SHOW_DIALOG" value="false" />
-    <option name="HIGHLIGHT_CONFLICTS" value="true" />
-    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
-    <option name="LAST_RESOLUTION" value="IGNORE" />
-  </component>
-  <component name="Git.Settings">
-    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$/.." />
-  </component>
-  <component name="ProjectColorInfo">{
-  &quot;associatedIndex&quot;: 4
-}</component>
-  <component name="ProjectId" id="2jOEQKaB30qNoKmMOIyiRqPActk" />
-  <component name="ProjectViewState">
-    <option name="hideEmptyMiddlePackages" value="true" />
-    <option name="showLibraryContents" value="true" />
-  </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "git-widget-placeholder": "main",
-    "last_opened_file_path": "D:/CuZn's/BUAA_2024_Python_Project",
-    "settings.editor.selected.configurable": "preferences.externalTools"
-  }
-}]]></component>
-  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
-  <component name="TaskManager">
-    <task active="true" id="Default" summary="Default task">
-      <changelist id="8509a7ce-6fc6-4dda-9ae1-7f2c6babfed9" name="Changes" comment="" />
-      <created>1721249705267</created>
-      <option name="number" value="Default" />
-      <option name="presentableId" value="Default" />
-      <updated>1721249705267</updated>
-    </task>
-    <servers />
-  </component>
-</project>
\ No newline at end of file
Index: .idea/material_theme_project_new.xml
===================================================================
diff --git a/.idea/material_theme_project_new.xml b/.idea/material_theme_project_new.xml
deleted file mode 100644
--- a/.idea/material_theme_project_new.xml	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
+++ /dev/null	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="MaterialThemeProjectNewConfig">
-    <option name="metadata">
-      <MTProjectMetadataState>
-        <option name="migrated" value="true" />
-        <option name="pristineConfig" value="false" />
-        <option name="userId" value="3495e43f:190f38bfa8e:-7ffe" />
-      </MTProjectMetadataState>
-    </option>
-  </component>
-</project>
\ No newline at end of file
Index: backend/.idea/misc.xml
===================================================================
diff --git a/backend/.idea/misc.xml b/backend/.idea/misc.xml
deleted file mode 100644
--- a/backend/.idea/misc.xml	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
+++ /dev/null	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
@@ -1,4 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.12 (Stock-Visualize-master)" project-jdk-type="Python SDK" />
-</project>
\ No newline at end of file
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
deleted file mode 100644
--- a/.idea/inspectionProfiles/profiles_settings.xml	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
+++ /dev/null	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
@@ -1,6 +0,0 @@
-<component name="InspectionProjectProfileManager">
-  <settings>
-    <option name="USE_PROJECT_PROFILE" value="false" />
-    <version value="1.0" />
-  </settings>
-</component>
\ No newline at end of file
Index: backend/.idea/inspectionProfiles/Project_Default.xml
===================================================================
diff --git a/backend/.idea/inspectionProfiles/Project_Default.xml b/backend/.idea/inspectionProfiles/Project_Default.xml
deleted file mode 100644
--- a/backend/.idea/inspectionProfiles/Project_Default.xml	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
+++ /dev/null	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
@@ -1,22 +0,0 @@
-<component name="InspectionProjectProfileManager">
-  <profile version="1.0">
-    <option name="myName" value="Project Default" />
-    <inspection_tool class="PyPackageRequirementsInspection" enabled="true" level="WARNING" enabled_by_default="true">
-      <option name="ignoredPackages">
-        <value>
-          <list size="2">
-            <item index="0" class="java.lang.String" itemvalue="importlib-resources" />
-            <item index="1" class="java.lang.String" itemvalue="typing-extensions" />
-          </list>
-        </value>
-      </option>
-    </inspection_tool>
-    <inspection_tool class="PyPep8Inspection" enabled="true" level="WEAK WARNING" enabled_by_default="true">
-      <option name="ignoredErrors">
-        <list>
-          <option value="E127" />
-        </list>
-      </option>
-    </inspection_tool>
-  </profile>
-</component>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
deleted file mode 100644
--- a/.idea/misc.xml	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
+++ /dev/null	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
@@ -1,7 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="Black">
-    <option name="sdkName" value="Python 3.8" />
-  </component>
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.8" project-jdk-type="Python SDK" />
-</project>
\ No newline at end of file
Index: .idea/BUAA_2024_Python_Project.iml
===================================================================
diff --git a/.idea/BUAA_2024_Python_Project.iml b/.idea/BUAA_2024_Python_Project.iml
deleted file mode 100644
--- a/.idea/BUAA_2024_Python_Project.iml	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
+++ /dev/null	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="PYTHON_MODULE" version="4">
-  <component name="NewModuleRootManager">
-    <content url="file://$MODULE_DIR$" />
-    <orderEntry type="jdk" jdkName="Python 3.8" jdkType="Python SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
Index: backend/.idea/backend.iml
===================================================================
diff --git a/backend/.idea/backend.iml b/backend/.idea/backend.iml
deleted file mode 100644
--- a/backend/.idea/backend.iml	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
+++ /dev/null	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="PYTHON_MODULE" version="4">
-  <component name="NewModuleRootManager">
-    <content url="file://$MODULE_DIR$" />
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
Index: .idea/.gitignore
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
deleted file mode 100644
--- a/.idea/.gitignore	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
+++ /dev/null	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
@@ -1,3 +0,0 @@
-# Default ignored files
-/shelf/
-/workspace.xml
Index: backend/.idea/modules.xml
===================================================================
diff --git a/backend/.idea/modules.xml b/backend/.idea/modules.xml
deleted file mode 100644
--- a/backend/.idea/modules.xml	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
+++ /dev/null	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectModuleManager">
-    <modules>
-      <module fileurl="file://$PROJECT_DIR$/.idea/backend.iml" filepath="$PROJECT_DIR$/.idea/backend.iml" />
-    </modules>
-  </component>
-</project>
\ No newline at end of file
Index: backend/database.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import inspect\r\n\r\nimport pymysql\r\n\r\n\r\ndef database_connect():\r\n    return pymysql.connect(\r\n        host=\"rm-cn-g6z3tw7xl00052co.rwlb.rds.aliyuncs.com\",\r\n        port=3306,\r\n        user=\"buaa_python_2024\",\r\n        passwd=\"DCJBzxhy2024\",\r\n        db=\"python_todo\",\r\n        charset=\"utf8mb4\",\r\n        binary_prefix=True,\r\n    )\r\n\r\n\r\ndef database_read(cmd, args, fetchone=True):\r\n    global connection\r\n    try:\r\n        connection = database_connect()\r\n        cursor = connection.cursor()\r\n        cursor.execute(cmd, args)\r\n        if fetchone:\r\n            result = cursor.fetchone()[0]\r\n        else:\r\n            result = cursor.fetchall()\r\n        return result\r\n    except Exception as e:\r\n        connection = database_connect()\r\n        print(f\"{inspect.stack()[1].function} error!\")\r\n        print(e)\r\n        return False\r\n\r\n\r\ndef database_write(cmd, args):\r\n    global connection\r\n    try:\r\n        cursor = connection.cursor()\r\n        cursor.execute(cmd, args)\r\n        connection.commit()\r\n        return True\r\n    except Exception as e:\r\n        connection = database_connect()\r\n        print(f\"{inspect.stack()[1].function} error!\")\r\n        print(e)\r\n        return False\r\n\r\n\r\ndef get_constant_info(file_name, constant_name):\r\n    cmd = \"\"\"\r\n    SELECT constant_value\r\n    FROM constants\r\n    WHERE  constant_name = %s AND file_name = %s\r\n    \"\"\"\r\n    args = (constant_name, file_name)\r\n    return database_read(cmd, args)\r\n\r\n\r\ndef delete(table_name, identifier_name, identifier):\r\n    cmd = f\"\"\"\r\n    DELETE FROM {table_name}\r\n    WHERE {identifier_name} = %s\r\n    \"\"\"\r\n    args = (identifier,)\r\n    return database_write(cmd, args)\r\n\r\n\r\ndef reset_info(subject_name, identifier_name, identifier, info_category, info):\r\n    cmd = f\"\"\"\r\n    UPDATE {subject_name}s\r\n    SET {subject_name}_{info_category} = %s\r\n    WHERE {identifier_name} = %s\r\n    \"\"\"\r\n    args = (info, identifier)\r\n    return database_write(cmd, args)\r\n\r\n\r\ndef get_info(subject_name, identifier_name, identifier, info_category):\r\n    cmd = f\"\"\"\r\n    SELECT {subject_name}_{info_category}\r\n    FROM {subject_name}s\r\n    WHERE {identifier_name} = %s\r\n    \"\"\"\r\n    args = (identifier,)\r\n    return database_read(cmd, args)\r\n\r\n\r\ndef get(table_name, identifier_name, identifier):\r\n    cmd = f\"\"\"\r\n    SELECT * FROM {table_name}\r\n    WHERE {identifier_name} = %s\r\n    \"\"\"\r\n    args = (identifier,)\r\n    return database_read(cmd, args, False)\r\n\r\n\r\ndef join(\r\n        table_name,\r\n        reference_table_name,\r\n        identifier_name,\r\n        identifier,\r\n        condition_cmd,\r\n        condition_args,\r\n):\r\n    cmd = (\r\n            f\"\"\"\r\n    SELECT t.*\r\n    FROM {table_name} t\r\n    JOIN {reference_table_name} u ON t.{identifier_name} = u.{identifier_name}\r\n    WHERE u.{identifier_name} = %s\r\n    \"\"\"\r\n            + condition_cmd\r\n    )\r\n    args = (identifier,) + condition_args\r\n    return database_read(cmd, args, False)\r\n\r\n\r\ndef list_all(table_name):\r\n    cmd = f\"\"\"\r\n    SELECT * FROM {table_name}\r\n    \"\"\"\r\n    return (get_list_head(table_name),) + database_read(cmd, (), False)\r\n\r\n\r\ndef list_info(table_name, identifier_name, identifier):\r\n    return get_list_head(table_name), get(table_name, identifier_name, identifier)\r\n\r\n\r\ndef get_list_head(table_name):\r\n    return tuple(\r\n        [results[0] for results in database_read(\"DESCRIBE \" + table_name, (), False)]\r\n    )\r\n\r\n\r\ndef print_list(lis):\r\n    for item in lis:\r\n        print(item)\r\n\r\n\r\nconnection = database_connect()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/database.py b/backend/database.py
--- a/backend/database.py	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
+++ b/backend/database.py	(date 1722146766136)
@@ -17,9 +17,8 @@
 
 def database_read(cmd, args, fetchone=True):
     global connection
+    global cursor
     try:
-        connection = database_connect()
-        cursor = connection.cursor()
         cursor.execute(cmd, args)
         if fetchone:
             result = cursor.fetchone()[0]
@@ -28,6 +27,7 @@
         return result
     except Exception as e:
         connection = database_connect()
+        cursor = connection.cursor()
         print(f"{inspect.stack()[1].function} error!")
         print(e)
         return False
@@ -35,13 +35,14 @@
 
 def database_write(cmd, args):
     global connection
+    global cursor
     try:
-        cursor = connection.cursor()
         cursor.execute(cmd, args)
         connection.commit()
         return True
     except Exception as e:
         connection = database_connect()
+        cursor = connection.cursor()
         print(f"{inspect.stack()[1].function} error!")
         print(e)
         return False
@@ -139,3 +140,4 @@
 
 
 connection = database_connect()
+cursor = connection.cursor()
Index: backend/task_system.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from datetime import datetime, timedelta, time\r\nfrom enum import Enum\r\n\r\nfrom backend.user_system import *\r\n\r\n\r\nclass TaskStatus(str):\r\n    PENDING = \"pending\"\r\n    UNDERWAY = \"underway\"\r\n    COMPLETED = \"completed\"\r\n    EXPIRED = \"expired\"\r\n\r\n\r\nclass TaskVital(int):\r\n    TRIVIAL = 0\r\n    NORMAL = 1\r\n    CRUCIAL = 2\r\n\r\n\r\ndef get_task_vital(task_vital_str):\r\n    if task_vital_str == \"‰∏çÈáçË¶Å\":\r\n        return TaskVital.TRIVIAL\r\n    elif task_vital_str == \"‰∏ÄËà¨ÈáçË¶Å\":\r\n        return TaskVital.NORMAL\r\n    else:\r\n        return TaskVital.CRUCIAL\r\n\r\n\r\nclass TaskTimePeriod(Enum):\r\n    MORNING = 0\r\n    AFTERNOON = 1\r\n    EVENING = 2\r\n\r\n    def __str__(self):\r\n        return self.name\r\n\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\n\r\n\r\nclass TaskSchedule:\r\n    def __init__(self, task, task_time_period, task_time):\r\n        self.task = task\r\n        self.task_time_period = task_time_period  # TaskTimePeriod ‰∏äÂçà/‰∏ãÂçà/Êôö‰∏ä\r\n        self.task_time = task_time  # TimeDelta(min) ‰ªªÂä°ÊåÅÁª≠Êó∂Èó¥\r\n\r\n    def __str__(self):\r\n        return (\r\n            f\"task.task_id: {self.task.task_id}\\n\"\r\n            f\"task_time_period: {self.task_time_period}\\n\"\r\n            f\"task_time: {self.task_time}\\n\"\r\n        )\r\n\r\n\r\nclass Task:\r\n\r\n    def __init__(self, user_email, **kwargs):\r\n        self.task_id = kwargs.get(\"task_id\", 0)\r\n        self.user_email = user_email\r\n        self.daily_task_id = kwargs.get(\"daily_task_id\", 0)\r\n        self.task_status = kwargs.get(\"task_status\", TaskStatus.PENDING)\r\n        self.task_vital = kwargs.get(\"task_vital\", TaskVital.TRIVIAL)\r\n        self.task_title = kwargs.get(\"task_title\", \"some_task\")\r\n        self.task_content = kwargs.get(\"task_content\", \"\")\r\n        self.task_tag = kwargs.get(\"task_tag\", \"ÂÖ∂‰ªñ\")\r\n        self.task_is_daily = kwargs.get(\"task_is_daily\", 0)\r\n        self.task_start_time = kwargs.get(\"task_start_time\", datetime.now())\r\n        self.task_end_time = kwargs.get(\r\n            \"task_end_time\", datetime.now() + timedelta(days=10)\r\n        )\r\n        self.task_duration_time = kwargs.get(\"task_duration_time\", timedelta(hours=10))\r\n        self.task_elapsed_time = kwargs.get(\"task_elapsed_time\", 0)\r\n        self.task_complete_time = kwargs.get(\"task_complete_time\", None)\r\n        self.task_pic_url = kwargs.get(\"task_pic_url\", None)\r\n\r\n    def __str__(self):\r\n        return (\r\n            f\"task_id: {self.task_id}\\n\"\r\n            f\"user_email: {self.user_email}\\n\"\r\n            f\"daily_task_id: {self.daily_task_id}\\n\"\r\n            f\"task_status: {self.task_status}\\n\"\r\n            f\"task_vital: {self.task_vital}\\n\"\r\n            f\"task_title: {self.task_title}\\n\"\r\n            f\"task_content: {self.task_content}\\n\"\r\n            f\"task_tag: {self.task_tag}\\n\"\r\n            f\"task_is_daily: {self.task_is_daily}\\n\"\r\n            f\"task_start_time: {self.task_start_time}\\n\"\r\n            f\"task_end_time: {self.task_end_time}\\n\"\r\n            f\"task_duration_time: {self.task_duration_time}\\n\"\r\n            f\"task_elapsed_time: {self.task_elapsed_time}\\n\"\r\n            f\"task_complete_time: {self.task_complete_time}\\n\"\r\n            f\"task_pic_url: {self.task_pic_url}\\n\"\r\n        )\r\n\r\n\r\nclass DailyTask:\r\n    def __init__(self, user_email, **kwargs):\r\n        self.user_email = user_email\r\n        self.daily_task_id = kwargs.get(\"daily_task_id\", 0)\r\n        self.daily_task_vital = kwargs.get(\"daily_task_vital\", TaskVital.TRIVIAL)\r\n        self.daily_task_title = kwargs.get(\"daily_task_title\", \"some_task\")\r\n        self.daily_task_content = kwargs.get(\"daily_task_content\", \"\")\r\n        self.daily_task_tag = kwargs.get(\"daily_task_tag\", \"ÂÖ∂‰ªñ\")\r\n        self.daily_task_start_date = kwargs.get(\r\n            \"daily_task_start_date\", datetime.today().date()\r\n        )\r\n        self.daily_task_end_date = kwargs.get(\r\n            \"daily_task_end_date\", datetime.today().date()\r\n        )\r\n        self.daily_task_start_time = kwargs.get(\r\n            \"daily_task_start_time\", datetime.today().time()\r\n        )\r\n        self.daily_task_end_time = kwargs.get(\r\n            \"daily_task_end_time\", datetime.today().time()\r\n        )\r\n        self.daily_task_duration_time = kwargs.get(\r\n            \"daily_task_duration_time\", timedelta(hours=10)\r\n        )\r\n        self.daily_task_elapsed_time = kwargs.get(\"daily_task_elapsed_time\", 0)\r\n        self.daily_task_pic_url = kwargs.get(\"daily_task_pic_url\", None)\r\n\r\n    def __str__(self):\r\n        return (\r\n            f\"user_email: {self.user_email}\\n\"\r\n            f\"daily_task_id: {self.daily_task_id}\\n\"\r\n            f\"daily_task_vital: {self.daily_task_vital}\\n\"\r\n            f\"daily_task_title: {self.daily_task_title}\\n\"\r\n            f\"daily_task_content: {self.daily_task_content}\\n\"\r\n            f\"daily_task_tag: {self.daily_task_tag}\\n\"\r\n            f\"daily_task_start_date: {self.daily_task_start_date}\\n\"\r\n            f\"daily_task_end_date: {self.daily_task_end_date}\\n\"\r\n            f\"daily_task_start_time: {self.daily_task_start_time}\\n\"\r\n            f\"daily_task_end_time: {self.daily_task_end_time}\\n\"\r\n            f\"daily_task_duration_time: {self.daily_task_duration_time}\\n\"\r\n            f\"daily_task_elapsed_time: {self.daily_task_elapsed_time}\\n\"\r\n            f\"daily_task_pic_url: {self.daily_task_pic_url}\\n\"\r\n        )\r\n\r\n    def to_normal_task(self, date):\r\n        normal_task = Task(\r\n            self.user_email,\r\n            daily_task_id=self.daily_task_id,\r\n            task_vital=self.daily_task_vital,\r\n            task_title=self.daily_task_title,\r\n            task_content=self.daily_task_content,\r\n            task_tag=self.daily_task_tag,\r\n            task_duration_time=self.daily_task_duration_time,\r\n            task_elapsed_time=self.daily_task_elapsed_time,\r\n            task_start_time=datetime.combine(date, self.daily_task_start_time),\r\n            task_end_time=datetime.combine(date, self.daily_task_end_time),\r\n            task_is_daily=1,\r\n            task_pic_url=self.daily_task_pic_url,\r\n        )\r\n        return normal_task\r\n\r\n\r\n# Â¢û\r\ndef add_task(task):\r\n    cmd = \"\"\"\r\n        INSERT INTO tasks (user_email, daily_task_id, task_status, task_vital,\r\n        task_title, task_content, task_tag, task_is_daily, task_start_time, task_end_time, task_duration_time, task_elapsed_time, task_complete_time, task_pic_url)\r\n        VALUE (%s, %s, %s , %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)\r\n        \"\"\"\r\n    args = (\r\n        task.user_email,\r\n        task.daily_task_id,\r\n        task.task_status,\r\n        task.task_vital,\r\n        task.task_title,\r\n        task.task_content,\r\n        task.task_tag,\r\n        task.task_is_daily,\r\n        task.task_start_time,\r\n        task.task_end_time,\r\n        task.task_duration_time,\r\n        task.task_elapsed_time,\r\n        task.task_complete_time,\r\n        task.task_pic_url,\r\n    )\r\n    return database_write(cmd, args)\r\n\r\n\r\n# Âà†\r\ndef delete_task(*task_id):\r\n    for item in task_id:\r\n        if not delete(\"tasks\", \"task_id\", item):\r\n            return False\r\n    return True\r\n\r\n\r\n# Êîπ\r\ndef reset_task_info(task_id, info_category, task_info):\r\n    return reset_info(\"task\", \"task_id\", task_id, info_category, task_info)\r\n\r\n\r\ndef reset_task(task):\r\n    cmd = \"\"\"\r\n    UPDATE tasks\r\n    SET task_status = %s, task_vital = %s, task_title = %s, task_content = %s, task_tag = %s, \\\r\n    task_start_time = %s, task_end_time = %s, task_duration_time = %s,task_elapsed_time =%s, \\\r\n    task_complete_time = %s, task_pic_url = %s\r\n    WHERE task_id = %s\r\n    \"\"\"\r\n    args = (\r\n        task.task_status,\r\n        task.task_vital,\r\n        task.task_title,\r\n        task.task_content,\r\n        task.task_tag,\r\n        task.task_start_time,\r\n        task.task_end_time,\r\n        task.task_duration_time,\r\n        task.task_elapsed_time,\r\n        task.task_complete_time,\r\n        task.task_pic_url,\r\n        task.task_id,\r\n    )\r\n    return database_write(cmd, args)\r\n\r\n\r\ndef add_work_time(task, work_time):\r\n    if task.task_elapsed_time + work_time < task.task_duration_time:\r\n        cmd = \"\"\"\r\n        UPDATE tasks\r\n        SET task_elapsed_time = ADDTIME(task_elapsed_time, %s)\r\n        WHERE task_id = %s\r\n        \"\"\"\r\n        args = (work_time, task.task_id)\r\n        database_write(cmd, args)\r\n    else:\r\n        task_is_complete(task)\r\n\r\n\r\n# Êü•\r\ndef get_task_info(task_id, info_category):\r\n    return get_info(\"task\", \"task_id\", task_id, info_category)\r\n\r\n\r\ndef get_task(task_id):\r\n    return get(\"tasks\", \"task_id\", task_id)\r\n\r\n\r\ndef _get_task_objects(data):\r\n    result = []\r\n    for line in data:\r\n        result.append(\r\n            Task(\r\n                line[1],\r\n                task_id=line[0],\r\n                daily_task_id=line[2],\r\n                task_status=line[3],\r\n                task_vital=line[4],\r\n                task_title=line[5],\r\n                task_content=line[6],\r\n                task_tag=line[7],\r\n                task_is_daily=line[8],\r\n                task_start_time=line[9],\r\n                task_end_time=line[10],\r\n                task_duration_time=line[11],\r\n                task_elapsed_time=line[12],\r\n                task_complete_time=line[13],\r\n                task_pic_url=line[14],\r\n            )\r\n        )\r\n    return result\r\n\r\n\r\ndef _get_task_objects_of_user_with_condition(\r\n        user_email, condition_cmd=\"\", condition_args=()\r\n):\r\n    update_tasks(user_email)\r\n    return _get_task_objects(\r\n        join(\"tasks\", \"users\", \"user_email\", user_email, condition_cmd, condition_args)\r\n    )\r\n\r\n\r\ndef get_task_object_of_user(user_email):\r\n    return _get_task_objects_of_user_with_condition(user_email)\r\n\r\n\r\ndef get_task_objects_of_user_in_date(user_email, some_date):\r\n    condition_cmd = \"\"\"\r\n    AND DATE(t.task_start_time) <= %s \r\n    AND DATE(t.task_end_time) >= %s \r\n    \"\"\"\r\n    return _get_task_objects_of_user_with_condition(\r\n        user_email, condition_cmd, (some_date, some_date)\r\n    )\r\n\r\n\r\ndef get_tasks_of_user_with_status(user_email, status):\r\n    condition_cmd = \"AND t.task_status = %s\"\r\n    return _get_task_objects_of_user_with_condition(\r\n        user_email, condition_cmd, (status,)\r\n    )\r\n\r\n\r\ndef get_task_objects_of_user_with_status_in_date(user_email, some_date, status):\r\n    condition_cmd = \"\"\"\r\n    AND DATE(t.task_start_time) <= %s \r\n    AND DATE(t.task_end_time) >= %s \r\n    AND t.task_status = %s\r\n    \"\"\"\r\n    return _get_task_objects_of_user_with_condition(\r\n        user_email, condition_cmd, (some_date, some_date, status)\r\n    )\r\n\r\n\r\ndef get_task_objects_of_user_completed_in_date(user_email, some_date):\r\n    condition_cmd = \"\"\"\r\n        AND DATE(t.task_complete_time) = %s \r\n        \"\"\"\r\n    return _get_task_objects_of_user_with_condition(\r\n        user_email, condition_cmd, (some_date,)\r\n    )\r\n\r\n\r\ndef get_complete_task_sum_in_date(user_email, some_date):\r\n    return len(\r\n        get_task_objects_of_user_completed_in_date(user_email, some_date)\r\n    )\r\n\r\n\r\ndef get_work_time_sum_in_date(user_email, some_date):\r\n    task_complete_list = get_task_objects_of_user_completed_in_date(user_email, some_date)\r\n    task_underway_list = get_task_objects_of_user_with_status_in_date(\r\n        user_email, some_date, TaskStatus.UNDERWAY\r\n    )\r\n    time_sum = timedelta(days=0)\r\n\r\n    for task in task_complete_list:\r\n        time_sum += task.task_duration_time\r\n\r\n    for task in task_underway_list:\r\n        time_sum += task.task_elapsed_time\r\n\r\n    return time_sum\r\n\r\n\r\ndef get_complete_task_sum(user_email):\r\n    return len(get_tasks_of_user_with_status(user_email, TaskStatus.COMPLETED))\r\n\r\n\r\ndef get_work_time_sum(user_email):\r\n    task_complete_list = get_tasks_of_user_with_status(user_email, TaskStatus.COMPLETED)\r\n    task_underway_list = get_tasks_of_user_with_status(user_email, TaskStatus.UNDERWAY)\r\n    time_sum = timedelta(days=0)\r\n\r\n    for task in task_complete_list:\r\n        time_sum += task.task_duration_time\r\n\r\n    for task in task_underway_list:\r\n        time_sum += task.task_elapsed_time\r\n\r\n    return time_sum\r\n\r\n\r\ndef get_average_work_time(user_email):\r\n    date_sum = (\r\n            date.today() - get_user_info(user_email, \"register_date\") + timedelta(days=1)\r\n    )\r\n    return get_work_time_sum(user_email) / date_sum.days\r\n\r\n\r\ndef get_week_report_of_user(user_email):\r\n    complete_task_list = get_tasks_of_user_with_status(user_email, TaskStatus.COMPLETED)\r\n    complete_task_list.sort(key=lambda x: x.task_complete_time)\r\n    print_list(complete_task_list)\r\n\r\n    this_week_start = date.today() - timedelta(days=date.today().weekday())\r\n\r\n    week_report = []\r\n    for delta in range(0, 7):\r\n        week_date = this_week_start + timedelta(days=delta)\r\n        week_report.append(\r\n            len(list(filter(lambda obj: obj.task_complete_time.date() == week_date, complete_task_list))))\r\n\r\n    return week_report\r\n\r\n\r\ndef _get_time(task_time_period, task):\r\n    # ‰∏äÂçà: 6:00 - 12:00; ‰∏ãÂçà: 12:00 - 18:00; Êôö‰∏ä: 18:00 - 23:30\r\n    if task_time_period == TaskTimePeriod.MORNING:\r\n        time_period_start = datetime.combine(date.today(), time(hour=6))\r\n        time_period_end = datetime.combine(date.today(), time(hour=12))\r\n    elif task_time_period == TaskTimePeriod.AFTERNOON:\r\n        time_period_start = datetime.combine(date.today(), time(hour=12))\r\n        time_period_end = datetime.combine(date.today(), time(hour=18))\r\n    else:\r\n        time_period_start = datetime.combine(date.today(), time(hour=18))\r\n        time_period_end = datetime.combine(date.today(), time(hour=23, minute=30))\r\n\r\n    start = max([time_period_start, task.task_start_time])\r\n    end = min([time_period_end, task.task_end_time])\r\n\r\n    return max(\r\n        [\r\n            min([end - start, task.task_duration_time - task.task_elapsed_time]),\r\n            timedelta(0),\r\n        ]\r\n    )\r\n\r\n\r\ndef get_task_schedule_objects(user_email, morning_time, afternoon_time, evening_time):\r\n    # Â§ÑÁêÜÊó∂Èó¥\r\n    morning_time = timedelta(hours=morning_time)\r\n    afternoon_time = timedelta(hours=afternoon_time)\r\n    evening_time = timedelta(hours=evening_time)\r\n    current_date = date.today()\r\n\r\n    # Ëé∑Âèñ‰ªªÂä°ÂàóË°®\r\n    task_objects_list = get_task_objects_of_user_with_status_in_date(\r\n        user_email, current_date, TaskStatus.UNDERWAY\r\n    ) + get_task_objects_of_user_with_status_in_date(\r\n        user_email, current_date, TaskStatus.PENDING\r\n    )\r\n    task_objects_list.sort(key=lambda x: (x.task_end_time, -x.task_vital), reverse=True)\r\n\r\n    # ËßÑÂàíÊó•Á®ã\r\n    task_schedule_list = []\r\n    while (morning_time or afternoon_time or evening_time) and task_objects_list:\r\n        task = task_objects_list.pop()\r\n\r\n        task_time = min([_get_time(TaskTimePeriod.MORNING, task), morning_time])\r\n        if task_time:\r\n            task_schedule_list.append(\r\n                TaskSchedule(task, TaskTimePeriod.MORNING, task_time)\r\n            )\r\n            task.task_elapsed_time += task_time\r\n            morning_time -= task_time\r\n\r\n        task_time = min([_get_time(TaskTimePeriod.AFTERNOON, task), afternoon_time])\r\n        if task_time:\r\n            task_schedule_list.append(\r\n                TaskSchedule(task, TaskTimePeriod.AFTERNOON, task_time)\r\n            )\r\n            task.task_elapsed_time += task_time\r\n            afternoon_time -= task_time\r\n\r\n        task_time = min([_get_time(TaskTimePeriod.EVENING, task), evening_time])\r\n        if task_time:\r\n            task_schedule_list.append(\r\n                TaskSchedule(task, TaskTimePeriod.EVENING, task_time)\r\n            )\r\n            task.task_elapsed_time += task_time\r\n            evening_time -= task_time\r\n\r\n    # ÊéíÂ∫è\r\n    task_schedule_list.sort(key=lambda x: x.task_time_period)\r\n    return task_schedule_list\r\n\r\n\r\n# TODO: Êú™‰øÆÊîπ\r\ndef get_ordered_tasks_date(user_email, date):\r\n    tasks_date = get_task_objects_of_user_in_date(user_email, date)\r\n    return sorted(tasks_date, key=lambda x: x.task_start_time)\r\n\r\n\r\ndef get_task_completed_sum(user_email):\r\n    tasks = get_tasks_of_user_with_status(user_email, TaskStatus.COMPLETED)\r\n    task_num = len(tasks)\r\n    duration_sum = sum(\r\n        [(_.task_end_time - _.task_start_time).total_seconds() / 3600 for _ in tasks]\r\n    )\r\n    workday_num = len(\r\n        set(\r\n            [\r\n                _.task_start_time.date()\r\n                for _ in tasks\r\n                if _.task_start_time.month == datetime.today().month\r\n            ]\r\n        )\r\n    )\r\n    return task_num, duration_sum, duration_sum / workday_num\r\n\r\n\r\ndef get_task_completed_date(user_email, date):\r\n    tasks = get_task_objects_of_user_with_status_in_date(\r\n        user_email, date, TaskStatus.COMPLETED\r\n    )\r\n    task_num = len(tasks)\r\n    duration_sum = sum(\r\n        [(_.task_end_time - _.task_start_time).total_seconds() / 3600 for _ in tasks]\r\n    )\r\n    return task_num, duration_sum\r\n\r\n\r\ndef _get_daily_task_objects(data):\r\n    result = []\r\n    for line in data:\r\n        temp = datetime.combine(datetime.today().date(), datetime.min.time())\r\n        daily_task = DailyTask(\r\n            user_email=line[1],\r\n            daily_task_id=line[0],\r\n            daily_task_vital=line[2],\r\n            daily_task_title=line[3],\r\n            daily_task_content=line[4],\r\n            daily_task_tag=line[5],\r\n            daily_task_start_date=line[6],\r\n            daily_task_end_date=line[7],\r\n            daily_task_start_time=(temp + line[8]).time(),\r\n            daily_task_end_time=(temp + line[9]).time(),\r\n            daily_task_duration_time=line[10],\r\n            daily_task_elapsed_time=line[11],\r\n            daily_task_pic_url=line[12],\r\n        )\r\n        result.append(daily_task)\r\n\r\n    return result\r\n\r\n\r\ndef add_daily_task(daily_task):\r\n    cmd = \"\"\"\r\n        INSERT INTO daily_tasks \r\n        (daily_task_id, user_email, daily_task_vital,\r\n        daily_task_title, daily_task_content, daily_task_tag,\r\n        daily_task_start_date, daily_task_end_date,\r\n        daily_task_start_time, daily_task_end_time,\r\n        daily_task_duration_time, daily_task_elapsed_time,\r\n        daily_task_pic_url)\r\n        VALUE (%s, %s, %s ,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)\r\n        \"\"\"\r\n    args = (\r\n        daily_task.daily_task_id,\r\n        daily_task.user_email,\r\n        daily_task.daily_task_vital,\r\n        daily_task.daily_task_title,\r\n        daily_task.daily_task_content,\r\n        daily_task.daily_task_tag,\r\n        daily_task.daily_task_start_date,\r\n        daily_task.daily_task_end_date,\r\n        daily_task.daily_task_start_time,\r\n        daily_task.daily_task_end_time,\r\n        daily_task.daily_task_duration_time,\r\n        daily_task.daily_task_elapsed_time,\r\n        daily_task.daily_task_pic_url,\r\n    )\r\n    connection = database_connect()\r\n    cursor = connection.cursor()\r\n    cursor.execute(cmd, args)\r\n    connection.commit()\r\n    cursor.execute(\"SELECT LAST_INSERT_ID();\")\r\n    id = cursor.fetchone()[0]\r\n    connection.close()\r\n    daily_task.daily_task_id = id\r\n    if not add_task(daily_task.to_normal_task(daily_task.daily_task_start_date)):\r\n        return False\r\n    return True\r\n\r\n\r\ndef delete_daily_task(*daily_task_id):\r\n    for item in daily_task_id:\r\n        if not delete(\"daily_tasks\", \"daily_task_id\", item):\r\n            return False\r\n    return True\r\n\r\n\r\ndef _get_daily_task_objects_of_user_with_condition(\r\n        user_email, condition_cmd=\"\", condition_args=()\r\n):\r\n    return _get_daily_task_objects(\r\n        join(\r\n            \"daily_tasks\",\r\n            \"users\",\r\n            \"user_email\",\r\n            user_email,\r\n            condition_cmd,\r\n            condition_args,\r\n        )\r\n    )\r\n\r\n\r\ndef get_daily_task_object(user_email, daily_task_id):\r\n    condition_cmd = \"\"\"\r\n    AND daily_task_id = %s;\r\n    \"\"\"\r\n    condition_args = (daily_task_id,)\r\n    return _get_daily_task_objects_of_user_with_condition(\r\n        user_email, condition_cmd, condition_args\r\n    )\r\n\r\n\r\ndef get_daily_task_object_of_user(user_email):\r\n    return _get_daily_task_objects_of_user_with_condition(user_email)\r\n\r\n\r\ndef get_daily_task_object_of_user_date(user_email, date):\r\n    condition_cmd = \"\"\"\r\n    AND DATE(%s) BETWEEN DATE(daily_task_start_date) AND DATE(daily_task_end_date);\r\n    \"\"\"\r\n    return _get_daily_task_objects_of_user_with_condition(\r\n        user_email, condition_cmd=condition_cmd, condition_args=(date,)\r\n    )\r\n\r\n\r\ndef create_daily_task_copy_date(user_email, date):\r\n    daily_tasks_date = get_daily_task_object_of_user_date(user_email, date)\r\n    for daily_task in daily_tasks_date:\r\n        temp = daily_task.daily_task_start_date\r\n        while temp <= date:\r\n            if not is_daily_task_copy_exist(user_email, daily_task.daily_task_id, temp):\r\n                if not add_task(daily_task.to_normal_task(temp)):\r\n                    return False\r\n            temp += timedelta(days=1)\r\n        if temp <= daily_task.daily_task_end_date:\r\n            if daily_task.daily_task_end_time < datetime.now().time():\r\n                if not is_daily_task_copy_exist(\r\n                        user_email, daily_task.daily_task_id, temp\r\n                ):\r\n                    if not add_task(daily_task.to_normal_task(temp)):\r\n                        return False\r\n    return True\r\n\r\n\r\ndef get_daily_task_copy_status_date(user_email, daily_task_id, date):\r\n    cmd = \"\"\"\r\n    SELECT task_status\r\n    FROM tasks\r\n    WHERE user_email = %s \r\n        AND task_is_daily = 1\r\n        AND daily_task_id = %s\r\n        AND DATE(task_start_time) = %s\r\n    \"\"\"\r\n    args = (user_email, daily_task_id, date)\r\n    return database_read(cmd, args)\r\n\r\n\r\ndef is_daily_task_copy_exist(user_email, daily_task_id, date):\r\n    cmd = \"\"\"\r\n    SELECT EXISTS(\r\n        SELECT 1\r\n        FROM tasks\r\n        WHERE user_email = %s \r\n            AND task_is_daily = 1 \r\n            AND daily_task_id = %s \r\n            AND DATE(task_start_time) = DATE(%s)\r\n    )As task_exists\r\n    \"\"\"\r\n    args = (user_email, daily_task_id, date)\r\n    result = database_read(cmd, args)\r\n    # print(result)\r\n    return result\r\n\r\n\r\ndef update_tasks(user_email):\r\n    return create_daily_task_copy_date(\r\n        user_email, datetime.now().date()\r\n    ) and update_task_status(user_email)\r\n\r\n\r\ndef update_task_status(user_email):\r\n    cmd = \"\"\"\r\n    UPDATE tasks\r\n    SET task_status = CASE\r\n        WHEN NOW() < task_start_time THEN 'pending'\r\n        WHEN NOW() > task_end_time AND task_status <> 'completed' THEN 'expired'\r\n        WHEN NOW() BETWEEN task_start_time AND task_end_time AND task_status <> 'completed' THEN 'underway'\r\n        WHEN task_status = 'completed' THEN 'completed'\r\n        ELSE 'pending'\r\n    END\r\n    WHERE user_email = %s\r\n    \"\"\"\r\n    return database_write(cmd, (user_email,))\r\n\r\n\r\ndef task_is_complete(task):\r\n    reset_task_info(task.task_id, \"status\", TaskStatus.COMPLETED)\r\n    reset_task_info(task.task_id, \"complete_time\", datetime.now())\r\n    if task.task_is_daily:\r\n        daily_task = get_daily_task_object(task.user_email, task.daily_task_id)[0]\r\n        if daily_task.daily_task_end_date > date.today():\r\n            if not is_daily_task_copy_exist(\r\n                    task.user_email,\r\n                    daily_task.daily_task_id,\r\n                    date.today() + timedelta(days=1),\r\n            ):\r\n                task = daily_task.to_normal_task(date.today() + timedelta(days=1))\r\n                add_task(task)\r\n\r\n\r\ndef reset_daily_task(daily_task):\r\n    cmd = \"\"\"\r\n        UPDATE daily_tasks \r\n        SET\r\n        daily_task_vital = %s,\\\r\n        daily_task_title = %s, daily_task_content = %s, daily_task_tag = %s,\\\r\n        daily_task_start_date = %s, daily_task_end_date = %s,\\\r\n        daily_task_start_time = %s, daily_task_end_time = %s,\\\r\n        daily_task_duration_time = %s, daily_task_elapsed_time = %s,\\\r\n        daily_task_pic_url = %s\r\n        WHERE daily_task_id = %s\r\n        \"\"\"\r\n    args = (\r\n        daily_task.daily_task_vital,\r\n        daily_task.daily_task_title,\r\n        daily_task.daily_task_content,\r\n        daily_task.daily_task_tag,\r\n        daily_task.daily_task_start_date,\r\n        daily_task.daily_task_end_date,\r\n        daily_task.daily_task_start_time,\r\n        daily_task.daily_task_end_time,\r\n        daily_task.daily_task_duration_time,\r\n        daily_task.daily_task_elapsed_time,\r\n        daily_task.daily_task_pic_url,\r\n        daily_task.daily_task_id,\r\n    )\r\n    return database_write(cmd, args)\r\n\r\n\r\ndef modify_task_pic_url(task, pic_url):\r\n    pic_name = pic_url.split(\"/\")[-1]\r\n    temp = str(task.user_email) + \"/task_pic/\" + str(task.task_id) + \"_\" + pic_name\r\n    bucket.put_object_from_file(temp, pic_url)\r\n    pic_url = \"https://foolish-han.oss-cn-beijing.aliyuncs.com/\" + temp\r\n    task.task_pic_url = pic_url\r\n\r\n\r\ndef modify_daily_task_pic_url(daily_task, pic_url):\r\n    pic_name = pic_url.split(\"/\")[-1]\r\n    temp = (\r\n            str(daily_task.user_email)\r\n            + \"/daily_task_pic/\"\r\n            + str(daily_task.daily_task_id)\r\n            + \"_\"\r\n            + pic_name\r\n    )\r\n    bucket.put_object_from_file(temp, pic_url)\r\n    pic_url = \"https://foolish-han.oss-cn-beijing.aliyuncs.com/\" + temp\r\n    daily_task.daily_task_pic_url = pic_url\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/task_system.py b/backend/task_system.py
--- a/backend/task_system.py	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
+++ b/backend/task_system.py	(date 1722146766143)
@@ -373,7 +373,8 @@
     for delta in range(0, 7):
         week_date = this_week_start + timedelta(days=delta)
         week_report.append(
-            len(list(filter(lambda obj: obj.task_complete_time.date() == week_date, complete_task_list))))
+            len(list(filter(lambda obj: obj.task_complete_time.date() == week_date,
+                            complete_task_list))))
 
     return week_report
 
@@ -652,10 +653,10 @@
     cmd = """
     UPDATE tasks
     SET task_status = CASE
-        WHEN NOW() < task_start_time THEN 'pending'
-        WHEN NOW() > task_end_time AND task_status <> 'completed' THEN 'expired'
-        WHEN NOW() BETWEEN task_start_time AND task_end_time AND task_status <> 'completed' THEN 'underway'
         WHEN task_status = 'completed' THEN 'completed'
+        WHEN NOW() < task_start_time THEN 'pending'
+        WHEN NOW() > task_end_time THEN 'expired'
+        WHEN NOW() BETWEEN task_start_time AND task_end_time THEN 'underway'
         ELSE 'pending'
     END
     WHERE user_email = %s
@@ -708,6 +709,8 @@
 
 
 def modify_task_pic_url(task, pic_url):
+    if not pic_url:
+        return
     pic_name = pic_url.split("/")[-1]
     temp = str(task.user_email) + "/task_pic/" + str(task.task_id) + "_" + pic_name
     bucket.put_object_from_file(temp, pic_url)
@@ -716,6 +719,8 @@
 
 
 def modify_daily_task_pic_url(daily_task, pic_url):
+    if not pic_url:
+        return
     pic_name = pic_url.split("/")[-1]
     temp = (
             str(daily_task.user_email)
@@ -727,3 +732,17 @@
     bucket.put_object_from_file(temp, pic_url)
     pic_url = "https://foolish-han.oss-cn-beijing.aliyuncs.com/" + temp
     daily_task.daily_task_pic_url = pic_url
+
+
+if __name__ == '__main__':
+    testTask = Task('test')
+    testTask.task_start_time = datetime.now()
+    testTask.task_end_time = datetime.now() + timedelta(hours=0.1)
+    print(add_task(testTask))
+    testDailyTask = DailyTask('test')
+    testDailyTask.daily_task_start_date = date.today() - timedelta(days=5)
+    testDailyTask.daily_task_end_date = date.today() + timedelta(days=5)
+    testDailyTask.daily_task_start_time = (datetime.now() - timedelta(hours=0.1)).time()
+    testDailyTask.daily_task_end_time = (datetime.now() + timedelta(hours=0.1)).time()
+    print(add_daily_task(testDailyTask))
+    print(update_tasks('test'))
Index: backend/user_system.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from datetime import date\r\n\r\nimport bcrypt\r\nimport oss2\r\n\r\nfrom backend.database import *\r\n\r\n# Â°´ÂÜôRAMÁî®Êà∑ÁöÑËÆøÈóÆÂØÜÈí•ÔºàAccessKey IDÂíåAccessKey SecretÔºâ\r\naccessKeyId = \"LTAI5tNicQ2EWpzvo7YAYB7D\"\r\naccessKeySecret = \"UvT8HCUfLb8Y8Vu2hPgSADdZyNmQCV\"\r\n# ‰ΩøÁî®‰ª£Á†ÅÂµåÂÖ•ÁöÑRAMÁî®Êà∑ÁöÑËÆøÈóÆÂØÜÈí•ÈÖçÁΩÆËÆøÈóÆÂá≠ËØÅ\r\nauth = oss2.Auth(accessKeyId, accessKeySecret)\r\n# Â°´ÂÜôBucketÊâÄÂú®Âú∞ÂüüÂØπÂ∫îÁöÑEndpoint„ÄÇ‰ª•Âçé‰∏ú1ÔºàÊù≠Â∑ûÔºâ‰∏∫‰æãÔºåEndpointÂ°´ÂÜô‰∏∫https://oss-cn-hangzhou.aliyuncs.com\r\nendpoint = \"https://oss-cn-beijing.aliyuncs.com\"\r\n\r\n# Â°´ÂÜôBucketÂêçÁß∞\r\nbucket = oss2.Bucket(auth, endpoint, \"foolish-han\")\r\n\r\n\r\ndef gen_hash_password(password):\r\n    salt = bcrypt.gensalt()\r\n    hashed_password = bcrypt.hashpw(password.encode(\"utf-8\"), salt)\r\n    return salt, hashed_password\r\n\r\n\r\ndef get_hash_password(password, salt):\r\n    return bcrypt.hashpw(password.encode(\"utf-8\"), salt)\r\n\r\n\r\ndef reset_user_password(user_email, user_password):\r\n    salt, user_password_hash = gen_hash_password(user_password)\r\n    return reset_user_info(\r\n        user_email, \"password_hash\", user_password_hash\r\n    ) and reset_user_info(user_email, \"hash_salt\", salt)\r\n\r\n\r\ndef is_user_password_correct(user_email, user_password):\r\n    user_hash_salt = get_user_info(user_email, \"hash_salt\")\r\n    user_password_hash = get_user_info(user_email, \"password_hash\")\r\n    if user_hash_salt and user_password_hash:\r\n        return user_password_hash == get_hash_password(user_password, user_hash_salt)\r\n    return False\r\n\r\n\r\ndef add_user(user_name, user_email, user_password):\r\n    cmd = \"\"\"\r\n    INSERT INTO users (user_name, user_email, user_password_hash, user_hash_salt, user_register_date)\r\n    VALUES(%s, %s, %s, %s, %s)\r\n    \"\"\"\r\n    salt, user_password_hash = gen_hash_password(user_password)\r\n    args = (user_name, user_email, user_password_hash, salt, date.today())\r\n    return database_write(cmd, args)\r\n\r\n\r\ndef delete_user(user_email):\r\n    return delete(\"users\", \"user_email\", user_email)\r\n\r\n\r\ndef reset_user_info(user_email, info_category, user_info):\r\n    # info_category: name, avatar_url, signature\r\n    return reset_info(\"user\", \"user_email\", user_email, info_category, user_info)\r\n\r\n\r\ndef get_user_info(user_email, info_category):\r\n    # info_category: name, avatar_url, signature\r\n    return get_info(\"user\", \"user_email\", user_email, info_category)\r\n\r\n\r\ndef is_user_email_exist(user_email):\r\n    cmd = \"\"\"\r\n    SELECT EXISTS(\r\n    SELECT 1 FROM users WHERE user_email = %s\r\n    ) AS user_email_exists;\r\n    \"\"\"\r\n    args = (user_email,)\r\n    return database_read(cmd, args)\r\n\r\n\r\ndef list_all_users():\r\n    return list_all(\"users\")\r\n\r\n\r\ndef list_user_info(user_email):\r\n    return list_info(\"users\", \"user_email\", user_email)\r\n\r\n\r\ndef modify_user_avatar(user_email, avatar_url):\r\n    avatar_name = avatar_url.split(\"/\")[-1]\r\n    temp = str(user_email) + \"/\" + \"user_avatar/\" + avatar_name\r\n    bucket.put_object_from_file(temp, avatar_url)\r\n    avatar_url = \"https://foolish-han.oss-cn-beijing.aliyuncs.com/\" + temp\r\n    reset_user_info(user_email, \"avatar_url\", avatar_url)\r\n\r\n\r\ndef store_local_user_email_password(user_email, user_password):\r\n    with open(\"local/storage.txt\", \"w\") as fd:\r\n        fd.write(f\"{user_email} {user_password}\")\r\n\r\n\r\ndef get_local_user_email_password():\r\n    try:\r\n        with open(\"local/storage.txt\", \"r\") as fd:\r\n            data = fd.read()\r\n        return data.split()\r\n    except FileNotFoundError as e:\r\n        print(e)\r\n        return False\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/user_system.py b/backend/user_system.py
--- a/backend/user_system.py	(revision 536a2a81d783cf110bb427665ad6756a6b05154d)
+++ b/backend/user_system.py	(date 1722146766149)
@@ -5,15 +5,10 @@
 
 from backend.database import *
 
-# Â°´ÂÜôRAMÁî®Êà∑ÁöÑËÆøÈóÆÂØÜÈí•ÔºàAccessKey IDÂíåAccessKey SecretÔºâ
 accessKeyId = "LTAI5tNicQ2EWpzvo7YAYB7D"
 accessKeySecret = "UvT8HCUfLb8Y8Vu2hPgSADdZyNmQCV"
-# ‰ΩøÁî®‰ª£Á†ÅÂµåÂÖ•ÁöÑRAMÁî®Êà∑ÁöÑËÆøÈóÆÂØÜÈí•ÈÖçÁΩÆËÆøÈóÆÂá≠ËØÅ
 auth = oss2.Auth(accessKeyId, accessKeySecret)
-# Â°´ÂÜôBucketÊâÄÂú®Âú∞ÂüüÂØπÂ∫îÁöÑEndpoint„ÄÇ‰ª•Âçé‰∏ú1ÔºàÊù≠Â∑ûÔºâ‰∏∫‰æãÔºåEndpointÂ°´ÂÜô‰∏∫https://oss-cn-hangzhou.aliyuncs.com
 endpoint = "https://oss-cn-beijing.aliyuncs.com"
-
-# Â°´ÂÜôBucketÂêçÁß∞
 bucket = oss2.Bucket(auth, endpoint, "foolish-han")
 
 
@@ -85,6 +80,8 @@
 
 
 def modify_user_avatar(user_email, avatar_url):
+    if not avatar_url:
+        return
     avatar_name = avatar_url.split("/")[-1]
     temp = str(user_email) + "/" + "user_avatar/" + avatar_name
     bucket.put_object_from_file(temp, avatar_url)
